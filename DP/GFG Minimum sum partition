class Solution
{

	public int minDifference(int arr[], int n){
        if (n == 0) {
            return 0;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
        }

        boolean[][] dp = new boolean[n + 1][sum + 1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = true;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                boolean pick = false;
                if (arr[i - 1] <= j) {
                    pick = dp[i - 1][j - arr[i - 1]];
                }
                boolean notPick = dp[i - 1][j];
                dp[i][j] = pick || notPick;
            }
        }
        int min = sum; 
        for (int i = 0; i <= sum / 2; i++) {
            if (dp[n][i]) {
                min = Math.min(min, Math.abs((sum - i) - i));
            }
        }
        return min;
    }
}
