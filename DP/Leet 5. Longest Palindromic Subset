class Solution {
    public static String rev(String s1){
        String s = "";
        for(int i = s1.length()-1; i >= 0; i--){
            s = s + s1.charAt(i);
        }
        return s;
    }

    public String longestPalindrome(String s) {
        String s2 = rev(s);

        int ind1 = s.length();
        int ind2 = s2.length();
        int[][] dp = new int[ind1+1][ind2+1];

        for(int[] x : dp){
            Arrays.fill(x,-1);
        }
        String str = "";
        lcs(s,s2,ind1,ind2,dp);

        int i = s.length();
        int j = s2.length();

        while(i > 0 && j > 0){
            if(s.charAt(i-1) == s2.charAt(j-1)){
                str = str + s.charAt(i-1);
                i--;
                j--;
            }else if(dp[i-1][j] > dp[i][j-1]){
                i--;
            }else{
                j--;
            }
        }
        return str;
    }

    public static int  lcs(String s,String s2, int ind1, int ind2,int[][] dp){
        if(ind1 == 0 || ind2 == 0){
            dp[ind1][ind2] = 0;
        }
        if(dp[ind1][ind2] != -1){
            return dp[ind1][ind2];
        }
        if(s.charAt(ind1-1) == s2.charAt(ind2-1)){
             return dp[ind1][ind2] = 1 + lcs(s,s2,ind1-1,ind2-1,dp);
        }
             return dp[ind1][ind2] = Math.max(lcs(s,s2,ind1-1,ind2,dp),lcs(s,s2,ind1,ind2-1,dp));
    }
}
