class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];

        for(int[] x : dp){
            Arrays.fill(x,-1);
        }
        return helper(m-1,n-1,obstacleGrid,dp);
    }

    public static int helper(int col, int row,int[][] obstacleGrid, int[][] dp){
        if(col < 0 || row < 0 || obstacleGrid[col][row] == 1){
            return 0;
        }
        if(col == 0 && row == 0){
            return 1;
        }
        if(dp[col][row] != -1){
            return dp[col][row];
        }

            int up = helper(col-1,row,obstacleGrid,dp);
            int right = helper(col,row-1,obstacleGrid,dp);

        dp[col][row] = up + right;
        return dp[col][row];
        
    }
}
