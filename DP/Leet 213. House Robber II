class Solution {

    public int helper(int[] nums){
        int pre2 = 0;
        int pre = nums[0];

        for(int i = 1; i < nums.length; i++){
            int pick = nums[i];
            if(i > 0){
                pick += pre2;
            }
            int notPick = pre;

            int cur = Math.max(pick, notPick);

            pre2 = pre;
            pre = cur;
        }

            return pre;
        }

    public int rob(int[] nums) {

        if(nums.length == 1){
            return nums[0];
        }
        int[] skip1st = new int[nums.length-1];
        int[] skipLast = new int[nums.length-1];
        
        for(int i = 0; i < nums.length; i++){
            if(i>0){
                skip1st[i-1] = nums[i];
            }
            if(i < nums.length - 1){
                skipLast[i] = nums[i];
            }
        }
        return Math.max(helper(skip1st),helper(skipLast));
    }
}
