class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int m = matrix.length;
        int[][]dp = new int[m][m];
        
        //last line
        for(int i = 0; i < m; i++){
            dp[m-1][i] = matrix[m-1][i];
        }
        
        for(int i = m-2; i >= 0; i--){
            for(int j = 0; j < m; j++){

                if(j == 0){
                    dp[i][j] = matrix[i][j] +  Math.min(dp[i+1][j], dp[i+1][j+1]);
                }else if(j == m-1){
                    dp[i][j] = matrix[i][j] + Math.min(dp[i+1][j], dp[i+1][j-1]);
                }else{
                    dp[i][j] = matrix[i][j] + Math.min(dp[i+1][j], Math.min( dp[i+1][j+1],dp[i+1][j-1]));
                } 
            }
        }
//find minimum in the top row
       int minPathSum = dp[0][0];
        for (int j = 1; j < m; j++) {
            minPathSum = Math.min(minPathSum, dp[0][j]);
        } 
        return minPathSum;
    }
}
