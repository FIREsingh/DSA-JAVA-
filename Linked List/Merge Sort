class Solution {
    public ListNode sortList(ListNode head) {

        if(head == null || head.next == null){
            return head;
        }

        ListNode mid = getMid(head);
        ListNode left = sortList(head);
        ListNode right = sortList(mid);
        return merge(left, right);
    }

      ListNode merge(ListNode list1, ListNode list2){
          ListNode node = new ListNode();
          ListNode temp = node;
          while(list1 != null && list2 != null){
              if(list1.val <= list2.val){
                  temp.next = list1;
                  list1 = list1.next;
                  temp = temp.next;
              }else{
                  temp.next = list2;
                  list2 = list2.next;
                  temp = temp.next;
              }
          }
          while(list1 != null){
              temp.next = list1;
              list1 = list1.next;
              temp = temp.next;
          }
          while(list2 != null){
              temp.next = list2;
              list2 = list2.next;
              temp = temp.next;
          }
          return node.next;
      } 

       ListNode getMid(ListNode head){
           ListNode preSlow = null;
           ListNode slow = head;
           ListNode fast = head;

           while(fast != null && fast.next != null){
               preSlow = slow;
               slow = slow.next;
               fast = fast.next.next;
           }
           preSlow.next = null;  //to detach first and second half.
           return slow;
       }
}
