class LL{
    private Node head;
    private Node tail;
    private int size;

    //Constructor to initialize the size of Linked list.
    public LL(){
        this.size = 0;
    }
    //Create a Node and add constructor.
    private class Node{
        private int value;
        private Node next;

        public Node(int value){
            this.value = value;
        }
        public Node(int value,Node next){
            this .value = value;
            this.next = next;
        }
    }
    //Add element in a linked list  as a Head.
    public void insertFirst(int value){
        Node  node = new Node(value);
        node.next = head;
        head = node;

        if(tail == null){
            tail = head;
        }
        size += 1;
    }
    //Add element in a linked list as Tail.
    public void insertLast(int value){
        if(tail == null) {
            insertFirst(value);
            return;
        }
        Node node = new Node(value);
        tail.next = node ;
        tail = node;
        size++;
        }
        //Add element in the given Index.
    public void insert(int value, int index){
        if(index == 0){
            insertFirst(value);
            return;
        }
        if(index == size){
            insertLast(value);
            return;
        }

        Node temp = head;
        for (int i = 1; i < index ; i++) {
            temp = temp.next;
        }
        Node node = new Node(value,temp.next);
        temp.next = node;
        size++;
    }
        //To display the Linked List.
    public void display(){
        Node temp = head;
        while (temp != null){
            System.out.print(temp.value + "->");
            temp = temp.next;
        }
        System.out.print("End");
    }

}

class Test {
    public static void main(String[] args) {
        LL list = new LL();
        
        list.insertFirst(3);
        list.insertFirst(2);
        list.insertFirst(8);

        list.insertLast(99);
        list.insertLast(77);
        list.insertLast(88);

        list.insert(31,3);
        list.insert(41,4);
        list.insert(51,3);
        
        list.display();
    }
}
